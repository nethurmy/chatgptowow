import os
import json
import random
import datetime
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import html_decoration as hd
from bs4 import BeautifulSoup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7243103974:AAH3YEuKRtQKOVRKaDqKD1c0f6mDi4zYK9I"
ADMIN_IDS = [78206270404]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    WAITING_FOR_TOKENS = State()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists("user_data.json"):
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ "captcha_required", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "captcha_required" not in user_data:
            user_data["captcha_required"] = {}
else:
    user_data = {"balances": {}, "chat_contexts": {}, "gift_used": set(), "captcha_required": {}}

def save_data():
    with open("user_data.json", "w") as f:
        json.dump(user_data, f)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def update_balance(user_id):
    today = datetime.date.today().isoformat()
    if user_id not in user_data["balances"]:
        user_data["balances"][user_id] = {"balance": 100000, "last_update": today}
    elif user_data["balances"][user_id]["last_update"] != today:
        user_data["balances"][user_id]["balance"] += 100000
        user_data["balances"][user_id]["last_update"] = today
    save_data()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard(user_id):
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É"))
    keyboard.add(KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"))
    keyboard.add(KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"))
    if user_id in ADMIN_IDS:
        keyboard.add(KeyboardButton(text="[–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨]"))
    return keyboard.as_markup(resize_keyboard=True)

# –ê–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_keyboard():
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="–†–∞–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"))
    keyboard.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    return keyboard.as_markup(resize_keyboard=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
def generate_fruit_captcha():
    fruits = ["üçé", "üçå", "üçá", "üçä", "üçì", "üçâ"]
    correct_fruit = random.choice(fruits)
    builder = InlineKeyboardBuilder()
    for fruit in fruits:
        builder.button(text=fruit, callback_data=fruit)
    builder.adjust(3)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return correct_fruit, builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data["captcha_required"] or user_data["captcha_required"][user_id]:
        correct_fruit, keyboard = generate_fruit_captcha()
        user_data["captcha_required"][user_id] = {"correct_fruit": correct_fruit, "message_id": None}
        sent_message = await message.answer(f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {correct_fruit}.", reply_markup=keyboard)
        user_data["captcha_required"][user_id]["message_id"] = sent_message.message_id
        return
    update_balance(user_id)
    if user_id not in user_data["chat_contexts"]:
        user_data["chat_contexts"][user_id] = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **, ### –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ `'` –∏–ª–∏ `\"`, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é —Ç–µ–∫—Å—Ç–∞."}]
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ GPT-4 ü§ñ.", reply_markup=get_main_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏
@dp.callback_query(F.data.in_({"üçé", "üçå", "üçá", "üçä", "üçì", "üçâ"}))
async def handle_captcha(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id in user_data["captcha_required"] and user_data["captcha_required"][user_id]:
        correct_fruit = user_data["captcha_required"][user_id]["correct_fruit"]
        if call.data == correct_fruit:
            await call.answer("–í–µ—Ä–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç. üòä", show_alert=True)
            await call.message.edit_text("–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç! üéâ")
            user_data["captcha_required"][user_id] = False
            await cmd_start(call.message)
        else:
            await call.answer("–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. üò¢", show_alert=True)
            correct_fruit, keyboard = generate_fruit_captcha()
            user_data["captcha_required"][user_id]["correct_fruit"] = correct_fruit
            await call.message.edit_text(f"–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ {correct_fruit}.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∞ –ë–∞–ª–∞–Ω—Å"
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    user_id = message.from_user.id
    update_balance(user_id)
    balance = user_data["balances"][user_id]["balance"]
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} —Ç–æ–∫–µ–Ω–æ–≤ üí∞", reply_markup=get_main_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"
@dp.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
async def clear_history(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data["chat_contexts"]:
        user_data["chat_contexts"][user_id] = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **, ### –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ `'` –∏–ª–∏ `\"`, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é —Ç–µ–∫—Å—Ç–∞."}]
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞. üßπ", reply_markup=get_main_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É"
@dp.message(F.text == "üîÑ –ó–∞–∫–æ–Ω—á–∏—Ç—å –±–µ—Å–µ–¥—É")
async def end_chat(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data["chat_contexts"]:
        user_data["chat_contexts"][user_id] = [{"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π **, ### –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ `'` –∏–ª–∏ `\"`, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é —Ç–µ–∫—Å—Ç–∞."}]
    await message.answer("–ë–µ—Å–µ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É, –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤ –≤–æ–ø—Ä–æ—Å. üòä", reply_markup=get_main_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "[–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨]"
@dp.message(F.text == "[–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨]")
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–ú–µ–Ω—é:", reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"
@dp.message(F.text == "–†–∞–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã")
async def distribute_tokens(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")
        await state.set_state(AdminStates.WAITING_FOR_TOKENS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
@dp.message(AdminStates.WAITING_FOR_TOKENS)
async def process_tokens(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        if message.text.isdigit():
            tokens = int(message.text)
            for user in user_data["balances"]:
                user_data["balances"][user]["balance"] += tokens
            save_data()
            await message.answer(f"–ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤.", reply_markup=get_admin_keyboard())
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_admin_keyboard())
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–ú–µ–Ω—é:", reply_markup=get_admin_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)